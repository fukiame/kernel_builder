From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Rem01Gaming <Rem01_Gaming@proton.me>
Date: Sun, 22 Oct 2023 01:26:00 +0000
Subject: [PATCH] treewide: Guard KernelSU's hooks

leaving it open without guard it properly causes an undefined symbol error when KernelSU is disabled.

Feature: KernelSU
Signed-off-by: Rem01Gaming <Rem01_Gaming@proton.me>

diff --git a/drivers/input/input.c b/drivers/input/input.c
index c6266e59bce6..1614bde07b8d 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -367,16 +367,20 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
+#ifdef CONFIG_KSU
 extern bool ksu_input_hook __read_mostly;
 extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+#endif /* CONFIG_KSU */
 
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
 	int disposition = input_get_disposition(dev, type, code, &value);
 
+#ifdef CONFIG_KSU
 	if (unlikely(ksu_input_hook))
 		ksu_handle_input_handle_event(&type, &code, &value);
+#endif /* CONFIG_KSU */
 
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
diff --git a/fs/exec.c b/fs/exec.c
index 9dd116306aa2..cd36e3f40989 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1706,12 +1706,13 @@ static int exec_binprm(struct linux_binprm *bprm)
 	return ret;
 }
 
-
+#ifdef CONFIG_KSU
 extern bool ksu_execveat_hook __read_mostly;
 extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
 			  void *envp, int *flags);
 extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
 				    void *argv, void *envp, int *flags);
+#endif /* CONFIG_KSU */
 
 /*
  * sys_execve() executes a new program.
@@ -1722,10 +1723,12 @@ static int __do_execve_file(int fd, struct filename *filename,
 			    int flags, struct file *file)
 {
 
+#ifdef CONFIG_KSU
 	if (unlikely(ksu_execveat_hook))
 		ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
 	else
 		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
+#endif /* CONFIG_KSU */
 
 	char *pathbuf = NULL;
 	struct linux_binprm *bprm;
diff --git a/fs/open.c b/fs/open.c
index ba3a3eb48841..595357649364 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -348,9 +348,10 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 	return ksys_fallocate(fd, mode, offset, len);
 }
 
-
+#ifdef CONFIG_KSU
 extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
 			   int *flags);
+#endif /* CONFIG_KSU */
 
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
@@ -367,7 +368,9 @@ long do_faccessat(int dfd, const char __user *filename, int mode)
 	int res;
 	unsigned int lookup_flags = LOOKUP_FOLLOW;
 
+#ifdef CONFIG_KSU
 	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
+#endif /* CONFIG_KSU */
 
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
diff --git a/fs/read_write.c b/fs/read_write.c
index fa8bb04b86dd..f60e79f0e87d 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -434,14 +434,18 @@ ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
 }
 EXPORT_SYMBOL(kernel_read);
 
+#ifdef CONFIG_KSU
 extern bool ksu_vfs_read_hook __read_mostly;
 extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
 			size_t *count_ptr, loff_t **pos);
+#endif /* CONFIG_KSU */
 
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
+#ifdef CONFIG_KSU
 	if (unlikely(ksu_vfs_read_hook))
 		ksu_handle_vfs_read(&file, &buf, &count, &pos);
+#endif /* CONFIG_KSU */
 
 	ssize_t ret;
 
diff --git a/fs/stat.c b/fs/stat.c
index e4ea28fddfe7..224af2be9abc 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -148,7 +148,9 @@ int vfs_statx_fd(unsigned int fd, struct kstat *stat,
 }
 EXPORT_SYMBOL(vfs_statx_fd);
 
+#ifdef CONFIG_KSU
 extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
+#endif /* CONFIG_KSU */
 
 /**
  * vfs_statx - Get basic and extra attributes by filename
@@ -172,7 +174,9 @@ int vfs_statx(int dfd, const char __user *filename, int flags,
 	int error = -EINVAL;
 	unsigned int lookup_flags = LOOKUP_FOLLOW | LOOKUP_AUTOMOUNT;
 
+#ifdef CONFIG_KSU
 	ksu_handle_stat(&dfd, &filename, &flags);
+#endif /* CONFIG_KSU */
 
 	if ((flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT |
 		       AT_EMPTY_PATH | KSTAT_QUERY_FLAGS)) != 0)
